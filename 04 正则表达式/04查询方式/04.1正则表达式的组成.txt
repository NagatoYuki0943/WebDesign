1 正则表达式的组成
    开头和结尾都是 /
    正则表达式由普通字符(例如字符 a 到 z)以及特殊字符(称为元字符)组成的文字模式.
    正则表达式作为一个模板,将某个字符模式与所搜索的字符串进行匹配

    正则表达式分3步走:
        (1) 查什么(匹配符)
        (2) 查多少
        (3) 从哪查(定位符)


2 查什么(匹配符)
    (1) 字符簇(默认区分大小写,除非添加i参数)
        通过ASCII码查找, A:65;Z:90;a:97;z:122;
        [a-z]       匹配a到z任意一个字符
        [a-g]       匹配a到g任意一个字符
        [A-Z]       匹配A到Z任意一个字符
        [a-zA-Z]    匹配可以匹配所有大小写字母
        [a-Z]       匹配不可以,因为a在Z后面,要写成[A-z],但是这样中间包含了其他字符

        [abcd] [a-d] 匹配abcd 

        [0-9]       匹配0到9任意一个数字
        [1-7]       匹配1到7任意一个数字
        [1347]      匹配1347任意一个数字
        [0-9a-z]    匹配0到9任意一个数字或者a-z任意一个字符
        /1/         匹配直接匹配1


    (2) 字符簇前面加上一个 ^ 代表取反
        [^a-z]      匹配a-z以外的一个任意字符
        [^0-9]      匹配0-9以外的一个任意数字
        [^0-9a-z]   匹配0-9以外的任意一个数字或者a-z以外的任意一个字符


    (3)特殊匹配符
        \d      匹配一个任意数字 和[0-9]等价
        \D      匹配一个非数字字符 和[^0-9]等价
        \w      匹配包扩下划线的任何数字字母下划线的一个字符 和[0-9a-zA-Z]等价  (数字字母下划线)
        \W      匹配非下划线的任何数字字母下划线的一个字符 和[^0-9a-zA-Z]等价,还可以使用[^\w]
        \s      匹配任意空白字符    (空格,回车,tab)
        \S      匹配任意非空白字符
        .       匹配除了换行 \n 之外的任意单个字符
        [\u4e00-\u9fa5] 匹配任意一个中文字符    \u 代表使用16进制
        /我/    匹配单个中文,只在js中可用,php不行


3 查多少(限定符)
    ?       匹配前面的字符0次或1次  {0,1}   colou?r,匹配 color 和 colour
    *       匹配前面的字符0次或多次 {0,}    go*gle,匹配 ggle 到 goo...gle
    +       匹配前面的字符1次或多次 {1,}    go+gle,匹配 gogle 到 goo...gle
    {n}     匹配前面的字符n次               go{2}gle,匹配 google
    {n,}    匹配前面的字符至少n次           go{2,}gle,匹配 google 到 goo...gle
    {n,m}   匹配前面字符n~m次               employe{0,2},匹配 employ,employe,employee


4 从哪查(定位符)
    定位符可以将一个正则表达式固定在一行的开始或结束.
    也可以创建只在单词内或只在单词的开始或结尾出现的正则表达式

    ^a  匹配以a开头的字符串
    a$  匹配以a结尾的字符串
    \b  匹配一个单词边界
    \B  匹配一个单词非边界

        <script>
            //手机号
            var str1 = '5adhao8iuafk15028655204jaehfajkffadfkl;apf';
            var str2 = '15028655204';
            var reg = /^1[34578]\d{9}$/;
            var z = reg.test(str1);
            console.log(z); //false
            var z = reg.test(str2);
            console.log(z); //true

            var str3 = "Iam 赵四"; //am开头是I,不行
            var reg = /\bam\b/;
            var z = reg.test(str3);
            console.log(z); //false
        </script>


5 转义字符
    因为在正则表达式中 . + \ / 等属于表达式的一部分,但是我们在匹配时,字符串中也需要匹配这些特殊字符,
    所以,我们必须使用 反斜杠 对某些特殊字符进行转义.

    特殊字符:
        . ( ) [ ] / \ |

    (1) 匹配任意url地址
        var url = 'http://xiling.me';
        var reg = /\w+:\/\/\w+\.\w+/;
        var m = url.match(reg);
        console.log(m); //Array [ "http://xiling.me" ]

    (2) 验证邮箱
        var str = '2487575080@qq.com';
        var reg1 = /^\w+@\w+\.\w{2,6}$/;
        var m = str.match(reg1);
        console.log(m); //Array [ "2487575080@qq.com" ]

    
6 | 或者的用法
    一般和()配合使用
    (pad)|(phone)|(watch)|(mac)|(pod)