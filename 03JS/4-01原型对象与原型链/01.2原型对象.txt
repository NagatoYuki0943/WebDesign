1 prototype属性
    (1) JS的每个对象都继承另一个对象,父级对象称为"原型"(prototype)对象,
        只有null除外,它没有自己的原型对象.


    (2) 而原型对象上的所有属性,都能被派生对象共享(相当于完全继承).


    (3) 通过构造函数生成实例对象时,会自动为实例对象分配原型对象.
        每一个构造函数都有一个prototype属性,这个属性就是实例对象的原型对象


    (4) 原型对象的属性不是实例对象自身的属性,但是只要修改原型对象,
        变动会执行体现在所有实例对象身上


    (5) 如果实例对象本身就有某个属性或者方法,那么原型对象身上的属性和方法就会失效(覆盖)


2 原型对象的作用,就是定义所有实例对象共享的属性和方法


3 查找原型对象的方法
    每一个构造函数都有一个prototype属性,这个属性就是实例对象的原型对象

    (1) 构造函数来查看原型对象prototype
        Cat.prototype

    (2) 通过对象自身查看原型对象
        cat1.__proto__

    (3) Object.getPrototypeOf(cat1);

        var a = Cat.prototype;
        var b = cat1.__proto__;
        var c = Object.getPrototypeOf(cat1);
        console.log(a); // Object { … }
        console.log(b); // Object { … }
        console.log(c); // Object { … }

    注意: 前两种方式不是很可靠,在最新的es6标准规定中,proto属性只有在浏览器中才能部署,其他环境不部署,
          而 Cat.prototype 在手动改变原型对象时会失败
        推荐使用第三种方式


4   如果想要修改一个对象的原型对象,只能通过原型对象本身修改

    构造函数原型增加属性,所有的对象都会增加这个属性
    JS对象的属性和方法一样,只是 = 后面不同
    三种获取原型对象的方法获取到的对象都可以增加共享属性/方法

    给构造函数原型增加属性,所有的对象都会增加这个属性

    (1) 为原型对象添加属性,实现属性共享
        Cat.prototype.color = "黑色";
        Cat.prototype.Echo = function() {
            console.log("Echo.....");
        }

    (2) 为原型对象添加属性/方法,实现属性/方法共享
        cat1.__proto__.Print = function() {
            console.log('Print...');
        }

    (3) 为原型对象添加属性/方法,实现属性/方法共享
        Object.getPrototypeOf(cat1).Cout = function() {
            console.log('Cout...');
        }


5
    <script>
        // 每一个构造函数都有一个prototype属性,这个属性就是实例对象的原型对象
        function Cat(name) {
            this.name = name;
            this.f = function() {
                console.log(this.name, this.color, 'miao~miao~miao');
            }
        }
        // 这就是cat1和cat2的原型对象,要通过构造函数来查看prototype,对象看不到
        console.log(Cat.prototype); // Object { … }

        // 给构造函数原型增加属性,所有的对象都会增加这个属性
        // 为原型对象添加属性,实现属性共享
        Cat.prototype.color = "黑色";

        var cat1 = new Cat('波斯猫');
        var cat2 = new Cat('土家猫');


        // cat1接cat2的color属性不是他俩的属性,是Cat.prototype的属性
        cat1.f(); // 波斯猫 黑色 miao~miao~miao    黑色被共享了
        cat2.f(); // 土家猫 黑色 miao~miao~miao

        cat2.color = "白色";
        cat2.f(); // 土家猫 白色 miao~miao~miao
    </script>
