1 垃圾回收
    函数内部变量从声明到使用,会被计数,从0开始以此增加,直到不再使用重置为0,重置为0之后会被系统回收,
    使用闭包可以保存起来,不被回收

    全局变量不受下面的影响,下面说的是局部变量

    (1) 当我们在函数内部引入一个变量或函数时,系统都会开辟一块内存空间,
        还将这块内存的引用计数器进行初始化,初始化值为0;
    (2) 如果外部有全局变量或者程序引用了这块内存空间,则引用计数器会自动进行+1操作;
    (3) 当函数执行完毕后,变量计数器重新归0,系统会自动运行垃圾回收机制,将函数运行产生的数据销毁;
        如果计数器不是0,则不会清除数据
    这个过程称之为垃圾回收机制

        var n = 99;
        //上面一行相当于
        var n;              //使用计数器 0
        n = 99;             //使用计数器 1
        console.log(++n);   //使用计数器 2
                            //当后面不再使用n时,计数器就变为0,0代表是垃圾,要被回收


2 闭包特点:
    (1) 可以读取函数内部的变量
    (2) 让这些变量是中保存在内存中,闭包可以使得它诞生的环境一直存在
        直到脚本结束才会销毁


3 注意:
    外层函数每次运行,都会生成一个新的闭包,而这个闭包又会保留外层函数的内部变量,所以内存消耗很大.
    因此不能滥用闭包,否则会造成网页的性能问题

