1 静态属性和方法指的是在构造方法内部中的属性和方法
    所有对象共享同一个静态属性和方法
    对象不能访问静态属性和方法,只能让构造函数名来访问


    C++中静态方法可以用    类名::属性/方法 / 对象.属性/方法, 对象指针->属性/方法  来调用.                   非静态方法使用  对象.属性/方法, 对象指针->属性/方法  访问
    C#中的静态方法只能由   类名.属性/方法    来调用,所以很多系统的方法全是静态方法(遇见类名.方法就是静态方法),  非静态方法使用  对象.属性/方法  访问
    PHP中静态成员只能使用  类名::属性/方法   来访问(静态变量只能由类名访问,静态方法可以由对象访问但是不推荐),   非静态方法使用  对象->属性/方法 访问
    JS中静态成员只能使用   构造函数名.属性/方法  来调用,不能用对象调用                                      非静态方法使用  对象.属性/方法  访问


2 添加静态属性和方法,使用 构造函数.xxx=xxx 直接创建,在函数内部也可以创建

<script>
    function man() {
        // 在内部添加静态属性
        man.x = 10;
        man.s++;
    }
    // 静态属性和方法直接使用函数名字.属性/方法来赋值,用的不是对象
    // 添加静态属性
    man.s = 0;
    // 添加静态方法
    man.f = function() {
        console.log(man.s);
    }

    // 通过类名来调用属性和方法
    man.f();            // 0
    console.log(man.s); // 0
    console.log(man.x); // undefined
    man(); // 调用函数，执行函数体内的代码, 执行了 man.x = 10; 和 man.s++; ,因此下面才有变化
    console.log(man.s); // 1
    console.log(man.x); // 10

    var m1 = new man();
    var m2 = new man();
    var m3 = new man();
    console.log(m3.x);    // undefinied
    console.log(m3.s);    // undefinied
    m3.f();   // 会报错,提示找不到方法

</script>
