1 constructor属性
    对象有一个constructor属性,指向原型对象所在的构造函数

    //由对象得到构造函数
    var cat1 = new Cat('波斯猫', '黑色');
    console.log(cat1.constructor);  //function Cat(name, color)
    var s = 'string';
    console.log(s.constructor);     //function String()
    var n = null;
    //console.log(n.constructor);   //报错


2 设置,获取原型对象
    Object.getPrototypeOf(对象);            获取原型对象标准方法
    Object.setPrototypeOf(对象,原型对象);   为现有对象设置原型对象标准方法


    (1) 构造函数来查看原型对象prototype   
        Cat.prototype
        
    (2) 通过对象自身查看原型对象
        cat1.__proto__

    (3) Object.getPrototypeOf(cat1);    标准方法

        var a = Cat.prototype;
        var b = cat1.__proto__;
        var c = Object.getPrototypeOf(cat1);
        console.log(a); //Object { … }
        console.log(b); //Object { … }
        console.log(c); //Object { … }


3 如果想要修改一个对象的原型对象,只能通过原型对象本身修改

    构造函数原型增加属性,所有的对象都会增加这个属性    
    JS对象的属性和方法一样,只是 = 后面不同
    三中获取原型对象的方法获取到的对象都可以增加共享属性/方法

    给构造函数原型增加属性,所有的对象都会增加这个属性

    (1) 为原型对象添加属性,实现属性共享
        Cat.prototype.color = "黑色";
        Cat.prototype.Echo = function() {
            console.log("Echo.....");
        }

    (2) 为原型对象添加属性/方法,实现属性/方法共享
        cat1.__proto__.Print = function() {
            console.log('Print...');
        }

    (3) 为原型对象添加属性/方法,实现属性/方法共享
        Object.getPrototypeOf(cat1).Cout = function() {
            console.log('Cout...');
        }

    注意: 前两种方式不是很可靠,在最新的es6标准规定中,proto属性只有在浏览器中才能部署,其他环境不部署,
          而 Cat.prototype 在手动改变原型对象时会失败
        推荐使用第三种方式