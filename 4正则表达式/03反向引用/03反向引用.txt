1 子表达式
    在正则表达式中,通过一对圆括号括起来的内容,我们称之为"子表达式"

    var reg = /\d(\d)\d/;   //意思是必须是3个连续的数字


2 捕获
    在正则表达式中,子表达式匹配到相应的内容时,系统会自动捕获这个行为,
    然后将子表达式匹配到的内容放入系统缓存区中.我们把这个过程称之为"捕获".


3 反向引用
    在正则表达式中,我们可以使用 \n  (n>0,正整数,代表系统中缓冲区编号) 来获取缓冲区中的内容,我们把这个过程叫做"反向引用"


4 反向引用作用

    (1) 例如查找连续相同的3个数字
        如: 111,222
        var reg = /(\d)\1\1/; //获取缓存区中第一个字符,比如是5,用5匹配相邻的数字,再用5匹配下一个数字


5
    <script>
        //反向引用
        var s = 'af1ea19234j5559831nlsf9opq4j8afjl5a90uw4lk3344c2089asujil45';
        //1 子表达式
        //发生捕获行为 1:0  2:9  3:2
        var reg = /(\d)\d/; //必须是两个连续的数字
        var m = s.match(reg);
        console.log(m); //Array [ "09", "0" ]


        var reg = /(\d)\d2/; //必须是3个连续的数字,结尾是2
        var m = s.match(reg);
        console.log(m); //Array [ "092", "0" ]


        var reg = /(\d)\1\1/; //获取缓存区中第一个字符,比如是5,用5匹配相邻的数字,再用5匹配下一个数字
        var m = s.match(reg);
        console.log(m); //Array [ "555", "5" ]


        var reg = /\dj(\d)\1\1/; //先匹配一个数字和j,再...获取缓存区中第一个,比如是5,用5匹配相邻的数字,再用5匹配下一个数字
        var m = s.match(reg);
        console.log(m); //Array [ "4j555", "5" ]


        var reg = /(\d)ea\1/; //先匹配一个数字,在匹配 ea ,获取缓存区中第一个匹配ea后面的数字
        var m = s.match(reg);
        console.log(m); //Array [ "1ea1", "1" ]


        var reg = /(\d)\1(\d)\2/; //先匹配一个数字,获取缓存区中第一个匹配第2个数字;再匹配一个数字,获取缓存区中第2个匹配第4个数字
        var m = s.match(reg);
        console.log(m); //Array(3) [ "3344", "3", "4" ]
    </script>


6 简单练习
    (1) 查找连续的四个数字 如:3598
        var reg = /\d\d\d\d/;
    
    (2) 查找数字,如1221,3443
        var reg = /(\d)(\d)\2\1/;

    (3) 查找字符 如 AABB TTMM
        (提示:在正则表达式中,通过 [A-Z]匹配任意字符)
        var reg = /([A-Z])\1([A-Z])\2/;

    (4) 查找连续相同的四个数字或者四个字符
        (提示:在正则表达式中,通过[0-9a-zA-Z])
        var reg = /([0-9a-zA-Z])\1\1\1/;